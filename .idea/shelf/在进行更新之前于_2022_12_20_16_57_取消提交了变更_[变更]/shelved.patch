Index: USTD_Dev_all/USTD_App1/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import HttpResponseRedirect, Http404, HttpResponse, render\r\nfrom django.http import HttpResponse\r\nfrom django.views.decorators.csrf import csrf_protect\r\n\r\nfrom . import models\r\nfrom .models import Student\r\nfrom .models import Score\r\nfrom .models import shenhe\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport sqlite3\r\n\r\n\r\n# Create your views here.\r\n\r\ndef Hello(request):\r\n    return HttpResponse('Hello World')\r\n\r\n\r\ndef login(request):\r\n    return render()\r\n\r\n\r\ndef index(request):\r\n    return render(request, 'index.html')\r\n\r\n\r\ndef shenhe(request):\r\n    if request.method == \"POST\":\r\n        file = request.FILES['image']\r\n        if file:\r\n            models.shenhe.objects.create(id=request.POST['id'], miaoshu=request.POST['miaoshu'],\r\n                                         leibie=request.POST['leibie'], image=file)\r\n    shenhe_list_obj = models.shenhe.objects.all()\r\n    return render(request, 'tables-editable.html', {'shenhe_list': shenhe_list_obj})\r\n\r\n\r\n# def shenhe(request):\r\n#     # 创建连接\r\n#     conn = sqlite3.connect('db.sqlite3')\r\n#     # 创建游标\r\n#     cursor = conn.cursor()\r\n#\r\n#     # 执行SQL，并返回收影响行数\r\n#\r\n#     shenhe_list =cursor.execute(\"select id,miaoshu,leibie,image from shenhe\").fetchall()\r\n#     print(shenhe_list)\r\n#\r\n#     # 关闭游标\r\n#     cursor.close()\r\n#     # 关闭连接\r\n#     conn.close()\r\n#     # 将查询得到的数据放在shenhe_list列表\r\n#     #eturn render(request, 'test.html',{'shenhe_list':shenhe_list})\r\n#     return render(request, 'tables-editable.html',{'shenhe_list': shenhe_list})\r\n\r\n\r\n@csrf_protect\r\n# 登录界面\r\ndef login(request):\r\n    if request.method == \"POST\":\r\n        id = request.POST.get('id')\r\n        pwd = request.POST.get('pwd')\r\n        # request.session['ID'] = id\r\n        if not all([id, pwd]):\r\n\r\n            return render(request, 'error.html')\r\n        else:\r\n            student = Student.objects.filter(id=id, pwd=pwd)\r\n            if len(student):\r\n                select(id)\r\n                return render(request, 'index.html')  # {\"ID\":ID}\r\n\r\n            else:\r\n\r\n                return render(request, 'error.html')\r\n    else:\r\n        return render(request, 'login.html')\r\n\r\ndef Academic_Early_Warning(request):\r\n    return render(request, 'Academic_Early_Warning.html')\r\n\r\ndef select(i):\r\n    conn = sqlite3.connect('db.sqlite3')\r\n    cursor0 = conn.cursor()\r\n    cursor1 = conn.cursor()\r\n    cursor2 = conn.cursor()\r\n    cursor3 = conn.cursor()\r\n    cursor4 = conn.cursor()\r\n    S = Score.objects.get(id=i)\r\n    avg_zy = cursor0.execute(\"SELECT AVG(zy) FROM Score\")\r\n    avg_cx = cursor1.execute(\"SELECT AVG(cx) FROM Score\")\r\n    avg_zs = cursor2.execute(\"SELECT AVG(zs) FROM Score\")\r\n    avg_gl = cursor3.execute(\"SELECT AVG(gl) FROM Score\")\r\n    avg_zh = cursor4.execute(\"SELECT AVG(zh) FROM Score\")\r\n    avg_zy = avg_zy.fetchone()[0]\r\n    avg_cx = avg_cx.fetchone()[0]\r\n    avg_zs = avg_zs.fetchone()[0]\r\n    avg_gl = avg_gl.fetchone()[0]\r\n    avg_zh = avg_zh.fetchone()[0]\r\n    # print(\"\\n\")\r\n    # print(\"\\n\")\r\n    # print(avg_zy,avg_cx,avg_zs,avg_gl,avg_zh)\r\n    # #print(avg_zy,avg_cx)\r\n    # print(\"\\n\")\r\n    # print(\"\\n\")\r\n    results = [{\"专业技术\": S.zy, \"创新创业\": S.cx, \"知识学习\": S.zs, \"管理实践\": S.gl, \"综合发展\": S.zh},\r\n               {\"专业技术\": avg_zy, \"创新创业\": avg_cx, \"知识学习\": avg_zs, \"管理实践\": avg_gl, \"综合发展\": avg_zh}]\r\n    data_length = len(results[0])\r\n    angles = np.linspace(0, 2 * np.pi, data_length, endpoint=False)\r\n    labels = [key for key in results[0].keys()]\r\n    score = [[v for v in result.values()] for result in results]\r\n    score_a = np.concatenate((score[0], [score[0][0]]))\r\n    score_b = np.concatenate((score[1], [score[1][0]]))\r\n    angles = np.concatenate((angles, [angles[0]]))\r\n    labels = np.concatenate((labels, [labels[0]]))\r\n    fig = plt.figure(figsize=(15, 6), dpi=100)\r\n    fig.suptitle(\"XXXX专业\")\r\n    ax1 = plt.subplot(121, polar=True)\r\n    ax2 = plt.subplot(122, polar=True)\r\n    ax, data, name = [ax1, ax2], [score_a, score_b], [\"个人\", \"平均\"]\r\n    for i in range(2):\r\n        for j in np.arange(0, 100 + 20, 20):\r\n            ax[i].plot(angles, 6 * [j], '-.', lw=0.5, color='black')\r\n        for j in range(5):\r\n            ax[i].plot([angles[j], angles[j]], [0, 100], '-.', lw=0.5, color='black')\r\n        ax[i].plot(angles, data[i], color='b')\r\n        # 隐藏最外圈的圆\r\n        ax[i].spines['polar'].set_visible(False)\r\n        # 隐藏圆形网格线\r\n        ax[i].grid(False)\r\n        for a, b in zip(angles, data[i]):\r\n            ax[i].text(a, b + 5, '%.00f' % b, ha='center', va='center', fontsize=12, color='b')\r\n        ax[i].set_thetagrids(angles * 180 / np.pi, labels)\r\n        ax[i].set_theta_zero_location('N')\r\n        ax[i].set_rlim(0, 100)\r\n        ax[i].set_rlabel_position(0)\r\n        ax[i].set_title(name[i])\r\n    # 汉字字体，优先使用楷体，找不到则使用黑体\r\n    plt.rcParams['font.sans-serif'] = ['Kaitt', 'SimHei']\r\n    # 正常显示负号\r\n    plt.rcParams['axes.unicode_minus'] = False\r\n    # plt.show()\r\n    plt.savefig(\"static\\\\image\\\\1.png\", format='png')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/USTD_Dev_all/USTD_App1/views.py b/USTD_Dev_all/USTD_App1/views.py
--- a/USTD_Dev_all/USTD_App1/views.py	(revision 7cb6f8a2a218a2b474d2680961a4e851b3f8ce97)
+++ b/USTD_Dev_all/USTD_App1/views.py	(date 1671526112845)
@@ -77,9 +77,17 @@
     else:
         return render(request, 'login.html')
 
+
 def Academic_Early_Warning(request):
     return render(request, 'Academic_Early_Warning.html')
 
+
+def test_view(request):
+    id = request.POST.get('id')
+    python_data = "python里的数据"
+    return render(request, "test_view.html", {"html_data_name": python_data})
+
+
 def select(i):
     conn = sqlite3.connect('db.sqlite3')
     cursor0 = conn.cursor()
Index: USTD_Dev_all/USTD_Dev_all/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for USTD_Dev_all project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.1.3.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\nimport os\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-u4zcyh8bb8(mr29wha&gticdkjo=f6*!5d^yr_$e__k*lva&u*'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'USTD_App1',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    # 'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'USTD_Dev_all.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [\r\n            os.path.join(BASE_DIR, 'templates')\r\n        ],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n                'django.template.context_processors.media',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\n\r\nWSGI_APPLICATION = 'USTD_Dev_all.wsgi.application'\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\r\n\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        # 'NAME': BASE_DIR / 'db.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = [\r\n    (os.path.join(BASE_DIR, 'static')),\r\n]\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/USTD_Dev_all/USTD_Dev_all/settings.py b/USTD_Dev_all/USTD_Dev_all/settings.py
--- a/USTD_Dev_all/USTD_Dev_all/settings.py	(revision 7cb6f8a2a218a2b474d2680961a4e851b3f8ce97)
+++ b/USTD_Dev_all/USTD_Dev_all/settings.py	(date 1671525804632)
@@ -43,7 +43,7 @@
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
-    # 'django.middleware.csrf.CsrfViewMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
