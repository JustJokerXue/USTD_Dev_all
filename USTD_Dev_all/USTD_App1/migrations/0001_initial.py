# Generated by Django 3.2 on 2023-04-20 06:49

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50, null=True, verbose_name='活动类型')),
                ('aname', models.CharField(max_length=50, null=True, verbose_name='活动名称')),
                ('content', models.CharField(max_length=2000, null=True, verbose_name='活动内容')),
                ('time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='活动时间')),
            ],
            options={
                'verbose_name': '活动汇总表',
                'verbose_name_plural': '活动汇总表',
                'db_table': 'Activity',
            },
        ),
        migrations.CreateModel(
            name='administrator',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('Employeeno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='职工号')),
                ('password', models.IntegerField(default=0, null=True, verbose_name='密码')),
            ],
            options={
                'verbose_name': '管理员',
                'verbose_name_plural': '管理员',
                'db_table': 'administrator',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aid', models.IntegerField(default=0, verbose_name='活动编号')),
                ('aname', models.CharField(max_length=50, null=True, verbose_name='活动名称')),
                ('no', models.IntegerField(default='', verbose_name='学号')),
                ('name', models.CharField(max_length=50, null=True, verbose_name='姓名')),
                ('banji', models.CharField(max_length=50, null=True, verbose_name='班级')),
            ],
            options={
                'verbose_name': '活动报名表',
                'verbose_name_plural': '活动报名表',
                'db_table': 'Application',
            },
        ),
        migrations.CreateModel(
            name='ComprehensiveDevelopment',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('banji', models.CharField(max_length=200, null=True, verbose_name='班级')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('department', models.CharField(max_length=200, null=True, verbose_name='院系')),
                ('total_score', models.IntegerField(default=0, verbose_name='成绩')),
            ],
            options={
                'verbose_name': '综合发展',
                'verbose_name_plural': '综合发展',
                'db_table': 'ComprehensiveDevelopment',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('stu_id', models.IntegerField(default=0, verbose_name='学号')),
                ('course', models.CharField(default='', max_length=200, null=True, verbose_name='课程')),
                ('grade', models.IntegerField(default=0, null=True, verbose_name='成绩')),
                ('gpa', models.FloatField(default=0, null=True, verbose_name='绩点')),
            ],
            options={
                'verbose_name': '知识学习',
                'verbose_name_plural': '知识学习',
                'db_table': 'Course',
            },
        ),
        migrations.CreateModel(
            name='Early_Warning',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('minimum', models.FloatField(default=0, null=True, verbose_name='实修学分')),
                ('compulsory', models.FloatField(default=0, null=True, verbose_name='必修课成绩')),
                ('elective', models.FloatField(default=0, null=True, verbose_name='选修课成绩')),
                ('physical', models.FloatField(default=0, null=True, verbose_name='体测成绩')),
                ('cet4', models.FloatField(default=0, null=True, verbose_name='四级成绩')),
                ('mandarin', models.FloatField(default=0, null=True, verbose_name='普通话成绩')),
            ],
            options={
                'verbose_name': '学业预警',
                'verbose_name_plural': '学业预警',
                'db_table': 'Early_Warning',
            },
        ),
        migrations.CreateModel(
            name='GraduationRequirement',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学业要求id')),
                ('credit', models.FloatField(default=0, null=True, verbose_name='要求学分')),
                ('compulsory', models.FloatField(default=0, null=True, verbose_name='必修课成绩')),
                ('elective', models.FloatField(default=0, null=True, verbose_name='选修课成绩')),
                ('physical', models.FloatField(default=0, null=True, verbose_name='体测成绩')),
                ('cet4', models.FloatField(default=0, null=True, verbose_name='四级成绩')),
                ('mandarin', models.FloatField(default=0, null=True, verbose_name='普通话成绩')),
            ],
            options={
                'verbose_name': '学业要求',
                'verbose_name_plural': '学业要求',
                'db_table': 'GraduationRequirement',
            },
        ),
        migrations.CreateModel(
            name='Innovation',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('banji', models.CharField(max_length=200, null=True, verbose_name='班级')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('department', models.CharField(max_length=200, null=True, verbose_name='院系')),
                ('total_score', models.IntegerField(default=0, verbose_name='成绩')),
            ],
            options={
                'verbose_name': '创新创业',
                'verbose_name_plural': '创新创业',
                'db_table': 'Innovation',
            },
        ),
        migrations.CreateModel(
            name='majorTechnology',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('banji', models.CharField(max_length=200, null=True, verbose_name='班级')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('department', models.CharField(max_length=200, null=True, verbose_name='院系')),
                ('total_score', models.IntegerField(default=0, verbose_name='成绩')),
            ],
            options={
                'verbose_name': '专业技术',
                'verbose_name_plural': '专业技术',
                'db_table': 'majorTechnology',
            },
        ),
        migrations.CreateModel(
            name='manage',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('banji', models.CharField(max_length=200, null=True, verbose_name='班级')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('department', models.CharField(max_length=200, null=True, verbose_name='院系')),
                ('total_score', models.IntegerField(default=0, verbose_name='成绩')),
            ],
            options={
                'verbose_name': '管理实践',
                'verbose_name_plural': '管理实践',
                'db_table': 'manage',
            },
        ),
        migrations.CreateModel(
            name='OverallScore',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('banji', models.CharField(max_length=200, null=True, verbose_name='班级')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('department', models.CharField(max_length=200, null=True, verbose_name='院系')),
                ('total_score', models.IntegerField(default=0, verbose_name='总评成绩')),
            ],
            options={
                'verbose_name': '综测总评成绩',
                'verbose_name_plural': '综测总评成绩',
                'db_table': 'OverallScore',
            },
        ),
        migrations.CreateModel(
            name='responsible',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('Employeeno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='职工号')),
                ('password', models.IntegerField(default=0, null=True, verbose_name='密码')),
            ],
            options={
                'verbose_name': '负责人',
                'verbose_name_plural': '负责人',
                'db_table': 'responsible',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('zy', models.IntegerField(default=0, null=True, verbose_name='专业技术能力')),
                ('cx', models.IntegerField(default=0, null=True, verbose_name='创新创业能力')),
                ('zs', models.IntegerField(default=0, null=True, verbose_name='知识学习能力')),
                ('gl', models.IntegerField(default=0, null=True, verbose_name='管理实践能力')),
                ('zh', models.IntegerField(default=0, null=True, verbose_name='综合发展能力')),
                ('overallgrade', models.IntegerField(default=0, null=True, verbose_name='总评成绩')),
            ],
            options={
                'verbose_name': '评分',
                'verbose_name_plural': '评分',
                'db_table': 'Score',
            },
        ),
        migrations.CreateModel(
            name='shenhe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no', models.IntegerField(default=0, null=True, verbose_name='学号')),
                ('miaoshu', models.CharField(max_length=200, null=True, verbose_name='材料描述')),
                ('leibie',
                 models.CharField(choices=[('专业技术', '专业技术'), ('创新创业', '创新创业'), ('管理实践', '管理实践'), ('综合发展', '综合发展')],
                                  default='专业技术', max_length=200, verbose_name='材料类别')),
                ('extra_points', models.IntegerField(default=0, null=True, verbose_name='加分')),
                ('image', models.ImageField(default=0, null=True, upload_to='', verbose_name='材料图片')),
                ('zhuangtai',
                 models.CharField(choices=[('T', '通过'), ('F', '不通过'), ('D', '待审核')], default='D', max_length=200,
                                  verbose_name='状态')),
            ],
            options={
                'verbose_name': '审核',
                'verbose_name_plural': '审核',
                'db_table': 'shenhe',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('age', models.IntegerField(default=0, null=True, verbose_name='年龄')),
                ('major', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('pwd', models.IntegerField(default=123456, verbose_name='密码')),
                ('banji', models.CharField(default='2020级', max_length=200, verbose_name='班级')),
                ('department', models.CharField(default='信工院', max_length=200, verbose_name='院系')),
            ],
            options={
                'verbose_name': '学生',
                'verbose_name_plural': '学生',
                'db_table': 'Student',
            },
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zyweight', models.FloatField(default=0, null=True, verbose_name='专业技术权重')),
                ('cxweight', models.FloatField(default=0, null=True, verbose_name='创新创业权重')),
                ('zsweight', models.FloatField(default=0, null=True, verbose_name='知识学习权重')),
                ('glweight', models.FloatField(default=0, null=True, verbose_name='管理实践权重')),
                ('zhweight', models.FloatField(default=0, null=True, verbose_name='综合发展权重')),
            ],
            options={
                'verbose_name': '综测权重系数',
                'verbose_name_plural': '综测权重系数',
                'db_table': 'Weight',
            },
        ),
        migrations.AddConstraint(
            model_name='weight',
            constraint=models.CheckConstraint(check=models.Q(('zyweight__gte', 0), ('zyweight__lte', 1)),
                                              name='zyweight'),
        ),
        migrations.AddConstraint(
            model_name='weight',
            constraint=models.CheckConstraint(check=models.Q(('cxweight__gte', 0), ('cxweight__lte', 1)),
                                              name='cxweight'),
        ),
        migrations.AddConstraint(
            model_name='weight',
            constraint=models.CheckConstraint(check=models.Q(('zsweight__gte', 0), ('zsweight__lte', 1)),
                                              name='zsweight'),
        ),
        migrations.AddConstraint(
            model_name='weight',
            constraint=models.CheckConstraint(check=models.Q(('glweight__gte', 0), ('glweight__lte', 1)),
                                              name='glweight'),
        ),
        migrations.AddConstraint(
            model_name='weight',
            constraint=models.CheckConstraint(check=models.Q(('zhweight__gte', 0), ('zhweight__lte', 1)),
                                              name='zhweight'),
        ),
        migrations.AddConstraint(
            model_name='shenhe',
            constraint=models.CheckConstraint(check=models.Q(('extra_points__gte', 0), ('extra_points__lte', 100)),
                                              name='extra_points'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zy__gte', 0), ('zy__lte', 100)), name='zy'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('cx__gte', 0), ('cx__lte', 100)), name='cx'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zs__gte', 0), ('zs__lte', 100)), name='zs'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('gl__gte', 0), ('gl__lte', 100)), name='gl'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zh__gte', 0), ('zh__lte', 100)), name='zh'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('overallgrade__gte', 0), ('overallgrade__lte', 100)),
                                              name='overallgrade'),
        ),
        migrations.AddConstraint(
            model_name='overallscore',
            constraint=models.CheckConstraint(check=models.Q(('total_score__gte', 0), ('total_score__lte', 100)),
                                              name='overall_score_total_score'),
        ),
        migrations.AddConstraint(
            model_name='manage',
            constraint=models.CheckConstraint(check=models.Q(('total_score__gte', 0), ('total_score__lte', 100)),
                                              name='manage_total_score'),
        ),
        migrations.AddConstraint(
            model_name='majortechnology',
            constraint=models.CheckConstraint(check=models.Q(('total_score__gte', 0), ('total_score__lte', 100)),
                                              name='major_technology_total_score'),
        ),
        migrations.AddConstraint(
            model_name='innovation',
            constraint=models.CheckConstraint(check=models.Q(('total_score__gte', 0), ('total_score__lte', 100)),
                                              name='innovation_total_score'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('credit__gte', 0), ('credit__lte', 170)),
                                              name='grad_req_credit'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('compulsory__gte', 0), ('compulsory__lte', 100)),
                                              name='grad_req_compulsory'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('elective__gte', 0), ('elective__lte', 100)),
                                              name='grad_req_elective'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('physical__gte', 0), ('physical__lte', 100)),
                                              name='grad_req_physical'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('cet4__gte', 0), ('cet4__lte', 750)),
                                              name='grad_req_cet4'),
        ),
        migrations.AddConstraint(
            model_name='graduationrequirement',
            constraint=models.CheckConstraint(check=models.Q(('mandarin__gte', 0), ('mandarin__lte', 100)),
                                              name='grad_req_mandarin'),
        ),
        migrations.AddField(
            model_name='early_warning',
            name='grad_req_id',
            field=models.ForeignKey(blank=True, db_column='stu_gradReq_id', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='USTD_App1.graduationrequirement', verbose_name='学业要求id'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(check=models.Q(('grade__gte', 0), ('grade__lte', 100)), name='grade'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.CheckConstraint(check=models.Q(('gpa__gte', 0), ('gpa__lte', 5)), name='gpa'),
        ),
        migrations.AddConstraint(
            model_name='comprehensivedevelopment',
            constraint=models.CheckConstraint(check=models.Q(('total_score__gte', 0), ('total_score__lte', 100)),
                                              name='dev_total_score'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('minimum__gte', 0), ('minimum__lte', 170)),
                                              name='minimum'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('compulsory__gte', 0), ('compulsory__lte', 100)),
                                              name='compulsory'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('elective__gte', 0), ('elective__lte', 100)),
                                              name='elective'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('physical__gte', 0), ('physical__lte', 100)),
                                              name='physical'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('cet4__gte', 0), ('cet4__lte', 750)), name='cet4'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('mandarin__gte', 0), ('mandarin__lte', 100)),
                                              name='mandarin'),
        ),
    ]
